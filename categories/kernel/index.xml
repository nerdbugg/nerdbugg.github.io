<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>kernel on Nerdbugg</title><link>http://nerdbugg.github.io/categories/kernel/</link><description>Recent content in kernel on Nerdbugg</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 29 Apr 2024 19:51:11 +0800</lastBuildDate><atom:link href="http://nerdbugg.github.io/categories/kernel/index.xml" rel="self" type="application/rss+xml"/><item><title>Linux Kernel Debug环境搭建</title><link>http://nerdbugg.github.io/p/linux-kernel-debug%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</link><pubDate>Mon, 29 Apr 2024 19:51:11 +0800</pubDate><guid>http://nerdbugg.github.io/p/linux-kernel-debug%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</guid><description>&lt;h2 id="前言">
&lt;a href="#%e5%89%8d%e8%a8%80">#&lt;/a>
前言
&lt;/h2>&lt;p>构建调试环境可以帮助程序员更好的了解程序运行时的行为，分析清楚模块间的交互关系。本文将使用QEMU+GDB的组合构建一个可以调试内核的环境，并且被调试的内核在虚拟机中可正常执行指令等操作。&lt;/p>
&lt;p>本环境搭建流程主要特点是：不依赖GUI，可在ssh会话中搭建；被调试的虚拟机包含完整发行版和系统，可安装包可执行指令。&lt;/p>
&lt;p>在此对环境搭建步骤进行记录，方面后续使用，也希望能帮到需要类似环境的同学。&lt;/p>
&lt;h2 id="方案概览">
&lt;a href="#%e6%96%b9%e6%a1%88%e6%a6%82%e8%a7%88">#&lt;/a>
方案概览
&lt;/h2>&lt;p>在普通的用户态代码调试中，GDB进程在调用ptrace系统调用Attach至被调试进程后，由Linux内核中ptrace系统调用的实现支撑GDB读写被调试进程的内存，修改被调试进程的寄存器等操作，对用户提供断点、观察变量值这些操作。&lt;/p>
&lt;p>那么自然，在对内核的调试中，同样需要一个更高级的组件能够观察修改内核的状态，并将其提供给GDB。据笔者了解到的可选项包含QEMU模拟器提供的GDB Stub，以及Linux内核提供的KGDB两种选项。&lt;/p>
&lt;ul>
&lt;li>QEMU模拟器提供GDB Stub，由QEMU Hypervisor对虚拟机内的内核状态进行监控与修改，并通过TCP连接对外暴露服务&lt;/li>
&lt;li>KGDB是Linux内核中的模块，可通过串口等方式对外暴露GDB Server服务&lt;/li>
&lt;/ul>
&lt;p>本文中将以QEMU+GDB方式搭建环境，KGDB方式可参考&lt;a class="link" href="https://sergioprado.blog/debugging-the-linux-kernel-with-gdb/" target="_blank" rel="noopener"
>相关资料&lt;/a>。&lt;/p>
&lt;h2 id="方案步骤">
&lt;a href="#%e6%96%b9%e6%a1%88%e6%ad%a5%e9%aa%a4">#&lt;/a>
方案步骤
&lt;/h2>&lt;h3 id="设置虚拟机">
&lt;a href="#%e8%ae%be%e7%bd%ae%e8%99%9a%e6%8b%9f%e6%9c%ba">#&lt;/a>
设置虚拟机
&lt;/h3>&lt;p>由于笔者使用的环境为ssh会话，不提供GUI显示，以下的步骤均在该环境下进行。&lt;/p>
&lt;p>通常使用中断提供显示界面时，需要为Linux内核添加 &lt;code>console=ttyS0&lt;/code> 参数，使内核向该tty设备中输出中断字节流，并由当前中断连接该设备，提供命令行界面。&lt;/p>
&lt;p>在大多数的发行版安装ISO中，内核并未配置相关参数。因此，必须借助GUI或者VNC等工具完成系统安装。&lt;/p>
&lt;p>但是，Debian发行版提供了单独的内核与ISO的安装介质，因此可以在安装过程中配置内核参数，从而可通过命令行安装系统。&lt;/p>
&lt;p>使用virt-install工具完成虚拟机操作系统安装，命令如下（参考&lt;a class="link" href="https://wiki.debian.org/KVM#Creating_a_new_guest" target="_blank" rel="noopener"
>KVM - Debian Wiki&lt;/a>）：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">virt-install --virt-type kvm --name bookworm-amd64 &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span>--location https://deb.debian.org/debian/dists/bookworm/main/installer-amd64/ &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span>--os-variant debian12 &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span>--disk &lt;span class="nv">size&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">10&lt;/span> --memory &lt;span class="m">1024&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span>--graphics none &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span>--console pty,target_type&lt;span class="o">=&lt;/span>serial &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span>--extra-args &lt;span class="s2">&amp;#34;console=ttyS0&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>完成安装后，可通过 &lt;code>virsh start bookworm-amd64&lt;/code> 命令启动虚拟机，使用 &lt;code>virtsh console bookworm-amd64&lt;/code> 命令连接虚拟机。&lt;/p>
&lt;p>为了进一步简化操作，便于后续设置Qemu GDB参数，编写合适的qemu命令行来启动该虚拟机。一个例子如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># IMAGE_PATH=path/to/vm_disk_image&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">qemu-system-x86_64 &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --enable-kvm &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> -m &lt;span class="m">2048&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> -smp &lt;span class="m">2&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> -drive &lt;span class="nv">file&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nv">$IMAGE_PATH&lt;/span>,format&lt;span class="o">=&lt;/span>qcow2 &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> -netdev user,id&lt;span class="o">=&lt;/span>net0,ipv6&lt;span class="o">=&lt;/span>off,hostfwd&lt;span class="o">=&lt;/span>tcp::8022-:22 -device virtio-net-pci,netdev&lt;span class="o">=&lt;/span>net0 &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> -nographic
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>该例子中仅为虚拟机配置磁盘与网络两种设备，并且网络使用最简单的User-mode-Networking，配置了主机8022至虚拟机22的端口转发用于ssh登录。&lt;/p>
&lt;h3 id="编译内核">
&lt;a href="#%e7%bc%96%e8%af%91%e5%86%85%e6%a0%b8">#&lt;/a>
编译内核
&lt;/h3>&lt;p>在Debian发行版中， &lt;code>/boot&lt;/code> 目录下会保存当前内核的config、内核、以及init ramfs。应尽可能使用相近的内核配置，避免虚拟机内配置不兼容出现问题。&lt;/p>
&lt;p>在下载对应版本内核源码后，通过上一步的ssh连接将虚拟机内的内核config拷贝下来，并打开 &lt;code>CONFIG_GDB_SCRIPTS&lt;/code> 配置，关闭 &lt;code>CONFIG_DEBUG_INFO_REDUCED&lt;/code> 配置。&lt;/p>
&lt;p>命令如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 使用12线程编译，并通过bear生成compile_commands.json便于后续IDE识别&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 由于包含了很多驱动程序模块，时间在半小时-1小时不等&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">bear -- make -j12
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在完成编译后，得到被压缩的内核文件： &lt;code>./arch/x86/boot/bzImage&lt;/code> ，原始内核文件： &lt;code>./vmlinux&lt;/code>&lt;/p>
&lt;p>使用 &lt;code>sshfs&lt;/code> 将虚拟机内的根文件目录挂载至某一文件夹下（ssh连接使用root用户），例如 &lt;code>~/vm&lt;/code> 。&lt;/p>
&lt;p>下面需要将编译好的内核模块安装至虚拟机中，命令如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># ~/vm 为sshfs挂载的虚拟机根目录&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">make modules_install &lt;span class="nv">INSTALL_MOD_PATH&lt;/span>&lt;span class="o">=&lt;/span>~/vm
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>最后，将内核编译使用的配置文件拷贝至虚拟机 &lt;code>/boot&lt;/code> 目录下。并通过Debian中的 &lt;code>update-initramfs&lt;/code> 命令根据配置生成iniframfs文件。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">update-initramfs -c -k 6.1.0
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这里的6.1.0为内核的后缀，可在编译时的config中进行设置，内核加载目录、生成initramfs的命令行中均应保持一致。&lt;/p>
&lt;p>最后，将内核文件、initramfs拷出备用。&lt;/p>
&lt;h3 id="使用编译内核启动虚拟机">
&lt;a href="#%e4%bd%bf%e7%94%a8%e7%bc%96%e8%af%91%e5%86%85%e6%a0%b8%e5%90%af%e5%8a%a8%e8%99%9a%e6%8b%9f%e6%9c%ba">#&lt;/a>
使用编译内核启动虚拟机
&lt;/h3>&lt;p>最后一次使用虚拟机的原始配置登陆虚拟机，通过 &lt;code>cat /proc/cmdline&lt;/code> 命令获取虚拟机内核启动参数。&lt;/p>
&lt;p>使用上一步得到的内核文件、initramfs启动虚拟机。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">qemu-system-x86_64 &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --enable-kvm &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> -m &lt;span class="m">2048&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> -smp &lt;span class="m">2&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> -kernel &lt;span class="nv">$KERNEL_PATH&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> -initrd &lt;span class="nv">$INITRD_PATH&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> -append &lt;span class="s2">&amp;#34;root=UUID=6b911d85-9296-46bc-b71d-0facb65f92a2 rw console=ttyS0 nokaslr&amp;#34;&lt;/span>&lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> -drive &lt;span class="nv">file&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nv">$IMAGE_PATH&lt;/span>,format&lt;span class="o">=&lt;/span>qcow2 &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> -netdev user,id&lt;span class="o">=&lt;/span>net0,ipv6&lt;span class="o">=&lt;/span>off,hostfwd&lt;span class="o">=&lt;/span>tcp::8022-:22 -device virtio-net-pci,netdev&lt;span class="o">=&lt;/span>net0 &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> -nographic
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这里的 &lt;code>-append&lt;/code> 选项即为上述得到的内核参数，在后续添加 &lt;code>console=ttyS0&lt;/code> 参数来在终端访问， &lt;code>nokaslr&lt;/code> 参数用来避免断点失效。&lt;/p>
&lt;h3 id="配置gdb">
&lt;a href="#%e9%85%8d%e7%bd%aegdb">#&lt;/a>
配置GDB
&lt;/h3>&lt;p>最后，配置QEMU gdb stub选项，启动虚拟机。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">qemu-system-x86_64 &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --enable-kvm &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> -m &lt;span class="m">2048&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> -smp &lt;span class="m">2&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> -kernel &lt;span class="nv">$KERNEL_PATH&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> -initrd &lt;span class="nv">$INITRD_PATH&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> -append &lt;span class="s2">&amp;#34;root=UUID=6b911d85-9296-46bc-b71d-0facb65f92a2 rw console=ttyS0 nokaslr&amp;#34;&lt;/span>&lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> -drive &lt;span class="nv">file&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nv">$IMAGE_PATH&lt;/span>,format&lt;span class="o">=&lt;/span>qcow2 &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> -netdev user,id&lt;span class="o">=&lt;/span>net0,ipv6&lt;span class="o">=&lt;/span>off,hostfwd&lt;span class="o">=&lt;/span>tcp::8022-:22 -device virtio-net-pci,netdev&lt;span class="o">=&lt;/span>net0 &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> -nographic &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> -S -gdb tcp::26002
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这里最后一行参数指定QEMU提供的gdb server监听26002端口，可使用gdb连接该端口进行调试。&lt;/p>
&lt;p>一个样例如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># under kernel source root&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">gdb vmlinux
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># enter gdb shell&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">(&lt;/span>gdb&lt;span class="o">)&lt;/span> target remote :26002
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>完成上述步骤后，gdb在连接至gdb server后应当已经处于中断执行的状态，可通过 &lt;code>hbreak&lt;/code> 指令对内核符号下断点进行调试。（使用 &lt;code>break&lt;/code> 指令会提示无法访问地址）&lt;/p>
&lt;p>至此，一个纯命令行环境下的Linux内核调试环境就已经搭建好了。&lt;/p>
&lt;p>如果有GUI环境的话，为虚拟机安装操作系统的步骤会简化很多，使用Libvirt的虚拟机管理器图形界面即可。&lt;/p>
&lt;h2 id="参考资料">
&lt;a href="#%e5%8f%82%e8%80%83%e8%b5%84%e6%96%99">#&lt;/a>
参考资料
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://wiki.debian.org/KVM#Creating_a_new_guest" target="_blank" rel="noopener"
>KVM - Debian Wiki&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://wiki.archlinux.org/title/Kernel/Traditional_compilation" target="_blank" rel="noopener"
>Kernel/Traditional compilation - Arch Wiki&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.kernel.org/doc/html/v4.14/dev-tools/gdb-kernel-debugging.html" target="_blank" rel="noopener"
>Debugging kernel and modules via gdb — The Linux Kernel documentation&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://nickdesaulniers.github.io/blog/2018/10/24/booting-a-custom-linux-kernel-in-qemu-and-debugging-it-with-gdb/" target="_blank" rel="noopener"
>Booting a Custom Linux Kernel in QEMU and Debugging It With GDB&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://sergioprado.blog/debugging-the-linux-kernel-with-gdb/" target="_blank" rel="noopener"
>Debugging the Linux kernel with GDB&lt;/a>&lt;/li>
&lt;/ul></description></item></channel></rss>